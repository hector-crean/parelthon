extern crate serde;
use serde::{Deserialize, Serialize};

use crate::services::open_ai::function::FunctionCall;

/// Represents a chat completion response returned by the model, based on the provided input.
#[derive(Serialize, Deserialize, Debug)]
pub struct ChatCompletionResponse {
    /// A unique identifier for the chat completion.
    id: Option<String>,
    /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
    choices: Vec<Choice>,
    created: i32,
    model: String,
    object: String,
    usage: Usage,
}

/// Represents a single choice among the chat completion choices.
#[derive(Serialize, Deserialize, Debug)]
pub struct Choice {
    /// The reason the model stopped generating tokens.
    /// This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    /// `length` if the maximum number of tokens specified in the request was reached,
    /// `content_filter` if content was omitted due to a flag from our content filters,
    /// or `function_call` if the model called a function.
    finish_reason: String,
    /// The index of the choice in the list of choices.
    index: i32,
    /// A chat completion message generated by the model.
    message: ChatCompletionMessage,
}

/// Represents a chat completion message generated by the model.
#[derive(Serialize, Deserialize, Debug)]
pub struct ChatCompletionMessage {
    /// The contents of the message.
    content: Option<String>,
    /// The name and arguments of a function that should be called, as generated by the model.
    function_call: Option<FunctionCall>,
    /// The role of the author of this message.
    role: String,
    /// The Unix timestamp (in seconds) of when the chat completion was created.
    created: i64,
    /// The model used for the chat completion.
    model: String,
    /// The object type, which is always `chat.completion`.
    object: String,
    /// Usage statistics for the completion request.
    usage: Usage,
}

/// Represents usage statistics for the completion request.
#[derive(Serialize, Deserialize, Debug)]
pub struct Usage {
    /// Number of tokens in the generated completion.
    completion_tokens: i32,
    /// Number of tokens in the prompt.
    prompt_tokens: i32,
    /// Total number of tokens used in the request (prompt + completion).
    total_tokens: i32,
}
